name: CI/CD

on:
  push:
    branches: [ master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # test python versions
          - python: "3.9"
            os: ubuntu-latest
          - python: "3.10"
            os: ubuntu-latest
          # test OSs
          - python: "3.x"
            os: macos-latest
          - python: "3.x"
            os: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.1
      - name: Test
        run: |
          poetry install
          poetry run pytest
      - name: Export Coverage Report
        run: poetry run coverage xml
      - name: Upload code coverage
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          name: xdi
          env_vars: OS,PYTHON
          fail_ci_if_error: true
  version-check:
    name: Check Version Bump
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          path: current
      - uses: actions/checkout@v2
        with:
          ref: master
          path: master
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.0
      - name: Check version bump
        run: |
          cd $GITHUB_WORKSPACE/current
          NEW_VERSION=$(poetry version -s)
          cd $GITHUB_WORKSPACE/master
          OLD_VERSION=$(poetry version -s)
          python -c "from packaging import version;assert version.parse(\"${NEW_VERSION}\") > version.parse(\"${OLD_VERSION}\"), \"❌ Bad version bump detected: you must bump the version in pyproject.toml\""
          python -c "print(\"✅ Version will be bumped from ${OLD_VERSION} to ${NEW_VERSION}\")"
  docs:
    if: github.ref == 'refs/heads/master'
    concurrency: docs-branch
    name: 🚀 Deploy Docs 📄
    runs-on: ubuntu-latest
    needs: ["test"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all commits/branches
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.0
      - name: Deploy docs
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          MAJOR=$(echo $(poetry version -s) | cut -d "." -f 1)
          MINOR=$(echo $(poetry version -s) | cut -d "." -f 2)
          poetry install
          poetry run mike deploy --push --update-aliases --branch gh-docs $MAJOR.$MINOR.x latest 
  pypi:
    if: github.ref == 'refs/heads/master'
    name: 🚀 PyPi Release 📦
    runs-on: ubuntu-latest
    needs: ["test"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.0
      - name: Release on PyPi
        continue-on-error: true  # allow pushes to master that don't release
        id: pypi
        run: |
          PACKAGE_VERSION=$(poetry version -s)
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_ENV
          printf "\nSee this release on GitHub: [v$PACKAGE_VERSION](https://github.com/$GITHUB_REPOSITORY/releases/tag/$PACKAGE_VERSION)\n" >> README.md
          poetry config pypi-token.pypi "${{ secrets.PYPI_API_TOKEN }}"
          poetry publish --build
      - name: 🚀 Create GitHub Release 😺
        uses: ncipollo/release-action@v1
        if: steps.pypi.outcome == 'success'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.package_version }}
          generateReleaseNotes: true